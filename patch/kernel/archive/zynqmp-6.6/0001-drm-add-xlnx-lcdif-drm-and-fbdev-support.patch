From 1468ae1797930697191b0c589f824616216a24d8 Mon Sep 17 00:00:00 2001
From: tfx2001 <tfx2001@outlook.com>
Date: Tue, 29 Oct 2024 23:26:53 +0800
Subject: [PATCH 1/2] drm: add xlnx lcdif drm and fbdev support

Signed-off-by: tfx2001 <tfx2001@outlook.com>
---
 drivers/gpu/drm/xlnx/Kconfig      |   6 +
 drivers/gpu/drm/xlnx/Makefile     |   2 +
 drivers/gpu/drm/xlnx/xlnx_lcdif.c | 338 ++++++++++++++++++++++++++++++
 drivers/video/fbdev/Kconfig       |   7 +
 drivers/video/fbdev/Makefile      |   2 +
 drivers/video/fbdev/lcdfb.c       | 294 ++++++++++++++++++++++++++
 6 files changed, 649 insertions(+)
 create mode 100644 drivers/gpu/drm/xlnx/xlnx_lcdif.c
 create mode 100644 drivers/video/fbdev/lcdfb.c

diff --git a/drivers/gpu/drm/xlnx/Kconfig b/drivers/gpu/drm/xlnx/Kconfig
index 8457a1a30551..b1cde0da8cfe 100644
--- a/drivers/gpu/drm/xlnx/Kconfig
+++ b/drivers/gpu/drm/xlnx/Kconfig
@@ -153,3 +153,9 @@ config DRM_XLNX_HDCP
 	  Choose this option if you have a FPGA display pipeline using
 	  Xilinx FPGA's in IP. This driver provides the kernel mode
 	  setting functionalities for the IP.
+
+config DRM_XLNX_LCDIF
+	tristate "Xilinx DRM LCD-IF Driver"
+	depends on XILINX_FRMBUF
+	select DRM_GEM_DMA_HELPER
+	select DRM_KMS_HELPER
diff --git a/drivers/gpu/drm/xlnx/Makefile b/drivers/gpu/drm/xlnx/Makefile
index fe48a7f6dcfc..62f25bb72f83 100644
--- a/drivers/gpu/drm/xlnx/Makefile
+++ b/drivers/gpu/drm/xlnx/Makefile
@@ -14,3 +14,5 @@ obj-$(CONFIG_DRM_XLNX_PL_DISP) += xlnx_pl_disp.o
 xlnx-sdi-objs += xlnx_sdi.o xlnx_sdi_timing.o
 obj-$(CONFIG_DRM_XLNX_SDI) += xlnx-sdi.o
 obj-$(CONFIG_DRM_XLNX_HDCP) += hdcp/
+xlnx-lcdif-objs += xlnx_lcdif.o
+obj-$(CONFIG_DRM_XLNX_LCDIF) += xlnx-lcdif.o
diff --git a/drivers/gpu/drm/xlnx/xlnx_lcdif.c b/drivers/gpu/drm/xlnx/xlnx_lcdif.c
new file mode 100644
index 000000000000..dc40293acfdc
--- /dev/null
+++ b/drivers/gpu/drm/xlnx/xlnx_lcdif.c
@@ -0,0 +1,338 @@
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/dma-mapping.h>
+#include <linux/dma/xilinx_frmbuf.h>
+
+#include <drm/drm.h>
+#include <drm/drm_bridge.h>
+#include <drm/drm_bridge_connector.h>
+#include <drm/drm_drv.h>
+#include <drm/drm_framebuffer.h>
+#include <drm/drm_fb_dma_helper.h>
+#include <drm/drm_encoder.h>
+#include <drm/drm_file.h>
+#include <drm/drm_fbdev_generic.h>
+#include <drm/drm_fourcc.h>
+#include <drm/drm_vblank.h>
+#include <drm/drm_gem_dma_helper.h>
+#include <drm/drm_atomic_helper.h>
+#include <drm/drm_gem_framebuffer_helper.h>
+#include <drm/drm_simple_kms_helper.h>
+
+struct xlnx_lcdif_dma_chan {
+	struct dma_chan *dma_chan;
+	struct dma_interleaved_template xt;
+	struct data_chunk sgl[1];
+};
+
+struct xlnx_lcdif_device {
+	struct platform_device *pdev;
+
+	struct drm_device drm;
+	struct drm_simple_display_pipe pipe;
+	struct drm_connector *connector;
+
+	struct xlnx_lcdif_dma_chan dma;
+};
+
+static const u32 xlnx_lcdif_formats[] = {
+	DRM_FORMAT_XRGB8888,
+	DRM_FORMAT_ARGB8888,
+};
+
+static inline struct xlnx_lcdif_device *
+xlnx_lcdif_from_drmdev(struct drm_device *drm)
+{
+	return container_of(drm, struct xlnx_lcdif_device, drm);
+}
+
+static inline struct xlnx_lcdif_device *
+to_lcdif_device_from_pdev(struct platform_device *pdev)
+{
+	return platform_get_drvdata(pdev);
+}
+
+DEFINE_DRM_GEM_DMA_FOPS(fops);
+
+static struct drm_driver xlnx_lcdif_drm_river = {
+	.driver_features = DRIVER_GEM | DRIVER_MODESET | DRIVER_ATOMIC,
+	.name = "xlnx-lcdif",
+	.fops = &fops,
+	DRM_GEM_DMA_DRIVER_OPS_VMAP,
+	.desc = "Xilinx LCD-IF driver",
+	.date = "20241027",
+	.major = 1,
+	.minor = 0,
+};
+
+static void xlnx_lcdif_complete(void *param)
+{
+	struct xlnx_lcdif_device *lcdif = param;
+	struct drm_crtc *crtc = &lcdif->pipe.crtc;
+
+	drm_crtc_handle_vblank(crtc);
+}
+
+static void xlnx_lcdif_prepare_dma(struct drm_plane *plane,
+				   struct drm_framebuffer *fb, u32 src_w,
+				   u32 src_h)
+{
+	struct drm_device *drm = plane->state->crtc->dev;
+	struct xlnx_lcdif_device *lcdif = xlnx_lcdif_from_drmdev(drm);
+	const struct drm_format_info *info = fb->format;
+	struct xlnx_lcdif_dma_chan *dma_chan = &lcdif->dma;
+	dma_addr_t luma_paddr;
+
+	/* Prepare DMA transfer descriptor and submit transfer */
+	luma_paddr = drm_fb_dma_get_gem_addr(fb, plane->state, 0);
+	if (!luma_paddr) {
+		drm_err(drm, "failed to get luma paddr\n");
+		return;
+	}
+
+	drm_dbg(drm, "num planes = %d\n", info->num_planes);
+	dma_chan->xt.numf = src_h;
+	dma_chan->sgl[0].size = drm_format_plane_width_bytes(info, 0, src_w);
+	dma_chan->sgl[0].icg = fb->pitches[0] - dma_chan->sgl[0].size;
+	dma_chan->xt.src_start = luma_paddr;
+	dma_chan->xt.frame_size = info->num_planes;
+	dma_chan->xt.dir = DMA_MEM_TO_DEV;
+	dma_chan->xt.src_sgl = true;
+	dma_chan->xt.dst_sgl = false;
+}
+
+static void xlnx_lcdif_issue_dma(struct drm_plane *plane)
+{
+	struct drm_device *drm = plane->state->crtc->dev;
+	struct xlnx_lcdif_device *lcdif = xlnx_lcdif_from_drmdev(drm);
+	struct xlnx_lcdif_dma_chan *dma = &lcdif->dma;
+	struct dma_async_tx_descriptor *desc;
+
+	desc = dmaengine_prep_interleaved_dma(
+		dma->dma_chan, &dma->xt, DMA_CTRL_ACK | DMA_PREP_INTERRUPT);
+	if (!desc) {
+		dev_err(&lcdif->pdev->dev,
+			"failed to prepare dma descriptor\n");
+		return;
+	}
+
+	desc->callback = xlnx_lcdif_complete;
+	desc->callback_param = lcdif;
+	xilinx_xdma_set_earlycb(dma->dma_chan, desc, EARLY_CALLBACK);
+
+	dmaengine_submit(desc);
+	dma_async_issue_pending(dma->dma_chan);
+}
+
+static void xlnx_lcdif_pipe_enable(struct drm_simple_display_pipe *pipe,
+				   struct drm_crtc_state *crtc_state,
+				   struct drm_plane_state *plane_state)
+{
+	struct drm_crtc *crtc = &pipe->crtc;
+	struct xlnx_lcdif_device *lcdif =
+		xlnx_lcdif_from_drmdev(pipe->crtc.dev);
+	struct xlnx_lcdif_dma_chan *dma = &lcdif->dma;
+
+	drm_crtc_vblank_on(crtc);
+
+	/* Xilinx DMA specific setup */
+	xilinx_xdma_drm_config(dma->dma_chan, DRM_FORMAT_XBGR8888);
+}
+
+static void xlnx_lcdif_pipe_disable(struct drm_simple_display_pipe *pipe)
+{
+	struct xlnx_lcdif_device *lcdif =
+		xlnx_lcdif_from_drmdev(pipe->crtc.dev);
+	struct drm_crtc *crtc = &lcdif->pipe.crtc;
+	struct drm_pending_vblank_event *event;
+
+	dmaengine_terminate_sync(lcdif->dma.dma_chan);
+
+	spin_lock_irq(&lcdif->drm.event_lock);
+	event = crtc->state->event;
+	if (event) {
+		crtc->state->event = NULL;
+		drm_crtc_send_vblank_event(crtc, event);
+	}
+	spin_unlock_irq(&lcdif->drm.event_lock);
+
+	drm_crtc_vblank_off(crtc);
+}
+
+static void xlnx_lcdif_pipe_update(struct drm_simple_display_pipe *pipe,
+				   struct drm_plane_state *old_plane_state)
+{
+	struct drm_crtc *crtc = &pipe->crtc;
+	struct drm_pending_vblank_event *event = crtc->state->event;
+	struct drm_plane_state *new_state = pipe->plane.state;
+	struct drm_framebuffer *fb = new_state->fb;
+
+	spin_lock_irq(&crtc->dev->event_lock);
+	event = crtc->state->event;
+	if (event) {
+		crtc->state->event = NULL;
+
+		if (drm_crtc_vblank_get(crtc) == 0)
+			drm_crtc_arm_vblank_event(crtc, event);
+		else
+			drm_crtc_send_vblank_event(crtc, event);
+	}
+	spin_unlock_irq(&crtc->dev->event_lock);
+
+	xlnx_lcdif_prepare_dma(new_state->plane, fb, new_state->src_w >> 16,
+			       new_state->src_h >> 16);
+	xlnx_lcdif_issue_dma(new_state->plane);
+}
+
+static const struct drm_simple_display_pipe_funcs xlnx_lcdif_pipe_funcs = {
+	.enable = xlnx_lcdif_pipe_enable,
+	.disable = xlnx_lcdif_pipe_disable,
+	.update = xlnx_lcdif_pipe_update,
+};
+
+static const struct drm_mode_config_funcs xlnx_lcdif_mode_config_funcs = {
+	.fb_create = drm_gem_fb_create_with_dirty,
+	.atomic_check = drm_atomic_helper_check,
+	.atomic_commit = drm_atomic_helper_commit,
+};
+
+static const struct drm_mode_config_helper_funcs
+	xlnx_lcdif_mode_config_helpers = {
+		.atomic_commit_tail = drm_atomic_helper_commit_tail_rpm,
+	};
+
+static int xlnx_lcdif_probe(struct platform_device *pdev)
+{
+	struct xlnx_lcdif_device *lcdif_dev;
+	struct drm_device *drm;
+	struct drm_bridge *bridge;
+	struct device *dev = &pdev->dev;
+	struct xlnx_lcdif_dma_chan *dma;
+
+	int ret = 0;
+
+	lcdif_dev = devm_drm_dev_alloc(&pdev->dev, &xlnx_lcdif_drm_river,
+				       struct xlnx_lcdif_device, drm);
+	if (IS_ERR(lcdif_dev)) {
+		ret = PTR_ERR(lcdif_dev);
+		dev_err(dev, "failed to allocate drm device: %d\n", ret);
+		return ret;
+	}
+
+	lcdif_dev->pdev = pdev;
+	drm = &lcdif_dev->drm;
+	dma = &lcdif_dev->dma;
+
+	dma->dma_chan = dma_request_chan(dev, "dma0");
+	if (IS_ERR(dma->dma_chan)) {
+		ret = PTR_ERR(dma->dma_chan);
+		dev_err(&pdev->dev, "failed to request dma channel: %d\n", ret);
+		return ret;
+	}
+
+	bridge = devm_drm_of_get_bridge(dev, dev->of_node, 0, 0);
+	if (IS_ERR(bridge)) {
+		ret = PTR_ERR(bridge);
+		dev_err(dev, "failed to get bridge: %d\n", ret);
+		goto err_dma_release;
+	}
+
+	ret = dma_set_mask_and_coherent(dev, DMA_BIT_MASK(32));
+	if (ret) {
+		dev_err(dev, "failed to set dma mask: %d\n", ret);
+		goto err_dma_release;
+	}
+
+	/* Modeset init */
+	ret = drmm_mode_config_init(drm);
+	if (ret) {
+		dev_err(dev, "failed to initialize mode config: %d\n", ret);
+		goto err_dma_release;
+	}
+
+	/* CRTC, Plane, Encoder */
+	ret = drm_simple_display_pipe_init(
+		drm, &lcdif_dev->pipe, &xlnx_lcdif_pipe_funcs,
+		xlnx_lcdif_formats, ARRAY_SIZE(xlnx_lcdif_formats), NULL, NULL);
+	if (ret) {
+		dev_err(dev, "failed to initialize pipe: %d\n", ret);
+		goto err_dma_release;
+	}
+
+	ret = drm_vblank_init(drm, drm->mode_config.num_crtc);
+	if (ret) {
+		dev_err(dev, "failed to initialize vblank: %d\n", ret);
+		goto err_dma_release;
+	}
+	drm_crtc_vblank_off(&lcdif_dev->pipe.crtc);
+
+	ret = drm_bridge_attach(&lcdif_dev->pipe.encoder, bridge, NULL,
+				DRM_BRIDGE_ATTACH_NO_CONNECTOR);
+	if (ret) {
+		dev_err(dev, "failed to attach bridge: %d\n", ret);
+		goto err_dma_release;
+	}
+	lcdif_dev->connector =
+		drm_bridge_connector_init(drm, &lcdif_dev->pipe.encoder);
+	if (IS_ERR(lcdif_dev->connector)) {
+		ret = PTR_ERR(lcdif_dev->connector);
+		dev_err(dev, "failed to initialize connector: %d\n", ret);
+		goto err_dma_release;
+	}
+	drm_connector_attach_encoder(lcdif_dev->connector,
+				     &lcdif_dev->pipe.encoder);
+
+	drm->mode_config.min_width = 1;
+	drm->mode_config.max_width = 1024;
+	drm->mode_config.min_height = 1;
+	drm->mode_config.max_height = 600;
+	drm->mode_config.preferred_depth = 24;
+	drm->mode_config.funcs = &xlnx_lcdif_mode_config_funcs;
+	drm->mode_config.helper_private = &xlnx_lcdif_mode_config_helpers;
+
+	drm_mode_config_reset(drm);
+
+	platform_set_drvdata(pdev, lcdif_dev);
+
+	ret = drm_dev_register(&lcdif_dev->drm, 0);
+	if (ret) {
+		dev_err(dev, "failed to register drm device: %d\n", ret);
+		goto err_dma_release;
+	}
+	drm_fbdev_generic_setup(drm, 0);
+
+	return 0;
+
+err_dma_release:
+	dma_release_channel(dma->dma_chan);
+	return ret;
+}
+
+static int xlnx_lcdif_remove(struct platform_device *pdev)
+{
+	struct xlnx_lcdif_device *lcdif_dev = to_lcdif_device_from_pdev(pdev);
+
+	dma_release_channel(lcdif_dev->dma.dma_chan);
+	drm_dev_unregister(&lcdif_dev->drm);
+	return 0;
+}
+
+static const struct of_device_id xlnx_lcdif_of_match[] = {
+	{ .compatible = "xlnx,lcdif-1.0.a" },
+	{ /* end of list */ },
+};
+MODULE_DEVICE_TABLE(of, xlnx_lcdif_of_match);
+
+static struct platform_driver xlnx_lcdif_driver = { 
+	.probe = xlnx_lcdif_probe,
+	.remove = xlnx_lcdif_remove,
+	.driver = {
+		.name = "xlnx-lcdif",
+		.of_match_table = of_match_ptr(xlnx_lcdif_of_match),
+	},
+};
+
+module_platform_driver(xlnx_lcdif_driver);
+MODULE_AUTHOR("Jason Tan <tfx2001@outlook.com>");
+MODULE_LICENSE("GPL");
diff --git a/drivers/video/fbdev/Kconfig b/drivers/video/fbdev/Kconfig
index 325298573e12..74dc6f7672a6 100644
--- a/drivers/video/fbdev/Kconfig
+++ b/drivers/video/fbdev/Kconfig
@@ -1950,6 +1950,13 @@ config FB_SM712
 	  called sm712fb. If you want to compile it as a module, say M
 	  here and read <file:Documentation/kbuild/modules.rst>.
 
+config FB_LCDFB
+	tristate "Xilinx LCD framebuffer support"
+	depends on FB
+	select FB_IOMEM_HELPERS
+	help
+	  Frame buffer driver for Xilinx LCD controller.
+
 source "drivers/video/fbdev/omap/Kconfig"
 source "drivers/video/fbdev/omap2/Kconfig"
 source "drivers/video/fbdev/mmp/Kconfig"
diff --git a/drivers/video/fbdev/Makefile b/drivers/video/fbdev/Makefile
index 70569f7027ed..c0ad1af89374 100644
--- a/drivers/video/fbdev/Makefile
+++ b/drivers/video/fbdev/Makefile
@@ -128,3 +128,5 @@ obj-$(CONFIG_FB_SIMPLE)           += simplefb.o
 
 # the test framebuffer is last
 obj-$(CONFIG_FB_VIRTUAL)          += vfb.o
+
+obj-$(CONFIG_FB_LCDFB)            += lcdfb.o
diff --git a/drivers/video/fbdev/lcdfb.c b/drivers/video/fbdev/lcdfb.c
new file mode 100644
index 000000000000..e418fd9c0387
--- /dev/null
+++ b/drivers/video/fbdev/lcdfb.c
@@ -0,0 +1,294 @@
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/fb.h>
+#include <linux/of.h>
+#include <linux/of_dma.h>
+#include <linux/platform_device.h>
+#include <linux/dma-mapping.h>
+#include <linux/dma/xilinx_frmbuf.h>
+#include <drm/drm_fourcc.h>
+
+#define LCDFB_NAME "lcdfb"
+#define PSEUDO_PALETTE_SIZE 16
+
+#define to_fb_info(pdev) ((struct fb_info *)platform_get_drvdata(pdev))
+#define to_lcdfb_device(pdev) ((struct lcdfb_device *)to_fb_info(pdev)->par)
+
+struct lcdfb_dma_chan {
+	struct dma_chan *dma_chan;
+	struct dma_interleaved_template xt;
+	struct data_chunk sgl[1];
+};
+
+struct lcdfb_device {
+	struct platform_device *pdev;
+
+	struct lcdfb_dma_chan dma;
+	dma_addr_t dma_addr; /* physics address of framebuffer */
+
+	struct fb_videomode mode;
+};
+
+/*
+ * These are the bitfields for each
+ * display depth that we support.
+ */
+struct lcdfb_rgb {
+	struct fb_bitfield red;
+	struct fb_bitfield green;
+	struct fb_bitfield blue;
+	struct fb_bitfield transp;
+};
+
+static struct lcdfb_rgb def_rgb_8 = {
+	.red	= {.offset = 0, .length = 8,},
+	.green	= {.offset = 8, .length = 8,},
+	.blue	= {.offset = 16, .length = 8,},
+	.transp = {.offset = 0, .length = 0,},
+};
+
+static inline u_int chan_to_field(u_int chan, struct fb_bitfield *bf)
+{
+	chan &= 0xffff;
+	chan >>= 16 - bf->length;
+	return chan << bf->offset;
+}
+
+static int lcdfb_setcolreg(u_int regno, u_int red, u_int green, u_int blue,
+			   u_int trans, struct fb_info *info)
+{
+	unsigned int val;
+	int ret = 1;
+
+	/*
+	 * If greyscale is true, then we convert the RGB value
+	 * to greyscale no mater what visual we are using.
+	 */
+	if (info->var.grayscale)
+		red = green = blue =
+			(19595 * red + 38470 * green + 7471 * blue) >> 16;
+
+	switch (info->fix.visual) {
+	case FB_VISUAL_TRUECOLOR:
+		/*
+		 * 12 or 16-bit True Colour.  We encode the RGB value
+		 * according to the RGB bitfield information.
+		 */
+		if (regno < 16) {
+			u32 *pal = info->pseudo_palette;
+
+			val = chan_to_field(red, &info->var.red);
+			val |= chan_to_field(green, &info->var.green);
+			val |= chan_to_field(blue, &info->var.blue);
+
+			pal[regno] = val;
+			ret = 0;
+		}
+		break;
+
+	default:
+		/* Unsupported visual type */
+		ret = -EINVAL;
+		break;
+	}
+
+	return ret;
+}
+
+static const struct fb_ops lcdfb_ops = {
+	.owner = THIS_MODULE,
+	FB_DEFAULT_IOMEM_OPS,
+	.fb_setcolreg = lcdfb_setcolreg,
+};
+
+static int lcdfb_init_fbinfo(struct platform_device *pdev)
+{
+	struct fb_info *info = platform_get_drvdata(pdev);
+	struct device_node *np;
+	int bytes_per_pixel;
+
+	pr_debug("%s\n", __func__);
+
+	info->pseudo_palette = devm_kmalloc_array(
+		&pdev->dev, PSEUDO_PALETTE_SIZE, sizeof(u32), GFP_KERNEL);
+	if (!info->pseudo_palette)
+		return -ENOMEM;
+
+	strscpy(info->fix.id, LCDFB_NAME, sizeof(info->fix.id));
+
+	info->fix.type = FB_TYPE_PACKED_PIXELS;
+	info->fix.type_aux = 0;
+	info->fix.visual = FB_VISUAL_TRUECOLOR;
+	info->fix.xpanstep = 0;
+	info->fix.ypanstep = 0;
+	info->fix.ywrapstep = 0;
+	info->fix.accel = FB_ACCEL_NONE;
+
+	info->var.xres = 1024;
+	info->var.yres = 600;
+	info->var.xres_virtual = info->var.xres;
+	info->var.yres_virtual = info->var.yres;
+	info->var.bits_per_pixel = 32;
+	info->fix.line_length =
+		info->var.xres_virtual * info->var.bits_per_pixel / 8;
+
+	info->var.nonstd = 0;
+	info->var.activate = FB_ACTIVATE_NOW;
+	info->var.height = -1;
+	info->var.width = -1;
+	info->var.accel_flags = 0;
+	info->var.vmode = FB_VMODE_NONINTERLACED;
+
+	info->fbops = &lcdfb_ops;
+	info->flags = FBINFO_READS_FAST;
+
+	info->var.red = def_rgb_8.red;
+	info->var.green = def_rgb_8.green;
+	info->var.blue = def_rgb_8.blue;
+	info->var.transp = def_rgb_8.transp;
+
+	np = pdev->dev.of_node;
+	info->var.grayscale = false;
+
+	bytes_per_pixel = BITS_TO_BYTES(info->var.bits_per_pixel);
+	info->fix.smem_len = bytes_per_pixel * info->var.xres_virtual *
+			     info->var.yres_virtual;
+
+	return 0;
+}
+
+static int lcdfb_probe(struct platform_device *pdev)
+{
+	struct lcdfb_device *lcdfb_dev;
+	struct fb_info *info;
+	struct lcdfb_dma_chan *dma;
+	struct dma_async_tx_descriptor *desc;
+	int ret = 0;
+
+	/* Allocate framebuffer */
+	info = framebuffer_alloc(sizeof(struct lcdfb_device), &pdev->dev);
+	if (!info) {
+		dev_err(&pdev->dev, "failed to allocate framebuffer info\n");
+		return -ENOMEM;
+	}
+	lcdfb_dev = info->par;
+	dma = &lcdfb_dev->dma;
+
+	platform_set_drvdata(pdev, info);
+	lcdfb_dev->pdev = pdev;
+
+	/* Initialize framebuffer info */
+	ret = lcdfb_init_fbinfo(pdev);
+	if (ret) {
+		dev_err(&pdev->dev, "failed to init fbinfo\n");
+		goto err_fb_alloc;
+	}
+
+	/* Request DMA channel and allocate buffer */
+	dma->dma_chan = dma_request_chan(&pdev->dev, "dma0");
+	if (IS_ERR(dma->dma_chan)) {
+		dev_err(&pdev->dev, "failed to request dma channel: %ld\n",
+			PTR_ERR(dma->dma_chan));
+		ret = PTR_ERR(dma->dma_chan);
+		goto err_fb_alloc;
+	}
+
+	info->screen_buffer = dma_alloc_wc(&pdev->dev, info->fix.smem_len,
+					   &lcdfb_dev->dma_addr, GFP_KERNEL);
+	if (!info->screen_buffer) {
+		dev_err(&pdev->dev, "failed to allocate dma buffer\n");
+		ret = -ENOMEM;
+		goto err_dma_release;
+	}
+	info->fix.smem_start = (unsigned long)lcdfb_dev->dma_addr;
+
+	ret = register_framebuffer(info);
+	if (ret) {
+		dev_err(&pdev->dev, "failed to register framebuffer\n");
+		goto err_dma_free;
+	}
+
+	/* Xilinx DMA specific setup */
+	xilinx_xdma_drm_config(dma->dma_chan, DRM_FORMAT_XBGR8888);
+	xilinx_xdma_set_mode(dma->dma_chan, AUTO_RESTART);
+
+	/* Prepare DMA transfer descriptor and submit transfer */
+	dma->xt.dir = DMA_MEM_TO_DEV;
+	dma->xt.src_start = info->fix.smem_start;
+	dma->xt.src_sgl = true;
+	dma->xt.dst_sgl = false;
+	dma->xt.dst_start = 0;
+	dma->xt.frame_size = 1;
+	dma->xt.numf = info->var.yres;
+
+	dma->sgl[0].size =
+		info->var.xres * BITS_TO_BYTES(info->var.bits_per_pixel);
+	dma->sgl[0].icg = 0;
+
+	desc = dmaengine_prep_interleaved_dma(
+		dma->dma_chan, &dma->xt, DMA_PREP_INTERRUPT | DMA_CTRL_ACK);
+	if (!desc) {
+		dev_err(&pdev->dev, "failed to prepare dma descriptor\n");
+		ret = -EINVAL;
+		goto err_fb_register;
+	}
+	dmaengine_submit(desc);
+	dma_async_issue_pending(dma->dma_chan);
+
+	return 0;
+
+err_fb_register:
+	unregister_framebuffer(info);
+err_dma_free:
+	dma_free_wc(&pdev->dev, info->fix.smem_len, info->screen_buffer,
+		    lcdfb_dev->dma_addr);
+err_dma_release:
+	dma_release_channel(dma->dma_chan);
+err_fb_alloc:
+	framebuffer_release(info);
+	return ret;
+}
+
+static int lcdfb_remove(struct platform_device *pdev)
+{
+	struct fb_info *info = to_fb_info(pdev);
+	struct lcdfb_device *lcdfb_dev = info->par;
+
+	if (lcdfb_dev->dma.dma_chan) {
+		dmaengine_terminate_sync(lcdfb_dev->dma.dma_chan);
+	}
+
+	if (info->screen_buffer) {
+		dma_free_wc(&pdev->dev, info->fix.smem_len, info->screen_buffer,
+			    lcdfb_dev->dma_addr);
+	}
+	if (lcdfb_dev->dma.dma_chan) {
+		dma_release_channel(lcdfb_dev->dma.dma_chan);
+	}
+
+	framebuffer_release(info);
+
+	return 0;
+}
+
+static const struct of_device_id lcdfb_of_match[] = {
+	{
+		.compatible = "xilinx,lcdfb",
+	},
+	{}, /* Terminating entry */
+};
+MODULE_DEVICE_TABLE(of, lcdfb_of_match);
+
+static struct platform_driver lcdfb_platform_driver = {
+	.driver = {
+		.name = "lcdfb",
+                .of_match_table = of_match_ptr(lcdfb_of_match),
+	},
+        .probe = lcdfb_probe,
+	.remove = lcdfb_remove,
+};
+
+module_platform_driver(lcdfb_platform_driver);
+MODULE_AUTHOR("Jason Tan <tfx2001@outlook.com>");
+MODULE_LICENSE("GPL");
-- 
2.34.1

