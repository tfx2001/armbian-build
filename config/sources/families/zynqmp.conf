#
# SPDX-License-Identifier: GPL-2.0
#
# Copyright (c) 2013-2023 Igor Pecovnik, igor@armbian.com
#
# This file is a part of the Armbian Build Framework
# https://github.com/armbian/build/
#
ARCH=arm64
SERIALCON='ttyPS0'

LINUXFAMILY=zynqmp
LINUXCONFIG="linux-zynqmp-${BRANCH}"

BOOTSOURCE='https://github.com/Xilinx/u-boot-xlnx.git'
BOOTBRANCH='tag:xilinx-v2024.1'
BOOTCONFIG="xilinx_zynqmp_virt_defconfig"
BOOTDIR='u-boot-xlnx'
BOOTSCRIPT='boot-zynqmp.cmd:boot.cmd'
UBOOT_TARGET_MAP=';;u-boot.elf'
ATF_COMPILE='no'

case "${BRANCH}" in

	vendor)
		declare -g KERNEL_MAJOR_MINOR="6.6" # Major and minor versions of this kernel. See https://github.com/Xilinx/linux-xlnx/blob/xilinx-v2020.2/Makefile
		KERNELSOURCE='https://github.com/Xilinx/linux-xlnx.git'
		KERNELBRANCH='branch:xlnx_rebase_v6.6_LTS_2024.1_update'
		KERNELPATCHDIR='archive/zynqmp-6.6'
		;;

esac

family_tweaks() {
	true
}

# @TODO: rpardini: this is leaking into the host system (/usr/local), let's not
compile_xilinx_bootgen() {
	# Source code checkout
	fetch_from_repo "https://github.com/Xilinx/bootgen.git" "xilinx-bootgen" "branch:master"

	# Compile and install only if git commit hash changed
	# need to check if /usr/local/bin/bootgen to detect new Docker containers with old cached sources
	if [[ ! -f .commit_id || $(git rev-parse @ 2> /dev/null) != $(< .commit_id) || ! -f /usr/local/bin/bootgen ]]; then
		display_alert "Compiling" "xilinx-bootgen" "info"
		make -s clean > /dev/null
		make -s -j$(nproc) bootgen > /dev/null
		mkdir -p /usr/local/bin/
		install bootgen /usr/local/bin > /dev/null 2>&1
		git rev-parse @ 2> /dev/null > .commit_id
	fi
}

uboot_custom_postprocess() {
	# Precompiled binaries
	cp ${SRC}/packages/blobs/zynqmp/bl31.elf .
	cp ${SRC}/packages/blobs/zynqmp/fpga.bit .
	cp ${SRC}/packages/blobs/zynqmp/pmufw.elf .
	cp ${SRC}/packages/blobs/zynqmp/zynqmp_fsbl.elf .
	cp ${SRC}/packages/blobs/zynqmp/system.dtb .

	# Compile Xilinx bootgen to make boot image
	pushd .
	compile_xilinx_bootgen
	popd

	# Create a bootgen build instruction file
	cat > build.bif << EOF
the_ROM_image:
{
	[bootloader, destination_cpu=a53-0] zynqmp_fsbl.elf
	[pmufw_image] pmufw.elf
	[destination_device=pl] fpga.bit
	[destination_cpu=a53-0, exception_level=el-3, trustzone] bl31.elf
	[destination_cpu=a53-0, load=0x100000] system.dtb
	[destination_cpu=a53-0, exception_level=el-2] u-boot.elf
}
EOF

	# Regenerate BOOT.bin
	rm -f BOOT.bin
	bootgen -arch zynqmp -image build.bif -o i BOOT.bin

	# And a simple README for users
	cat > README << EOF
# Regenerate Zynq BOOT.bin from blobs
bootgen -arch zynqmp -image build.bif -o i BOOT.bin
EOF

	# Package build components into u-boot lib dir
	cp bl31.elf "$uboottempdir/usr/lib/${uboot_name}"
	cp fpga.bit "$uboottempdir/usr/lib/${uboot_name}"
	cp pmufw.elf "$uboottempdir/usr/lib/${uboot_name}"
	cp zynqmp_fsbl.elf "$uboottempdir/usr/lib/${uboot_name}"
	cp system.dtb "$uboottempdir/usr/lib/${uboot_name}"
	cp build.bif "$uboottempdir/usr/lib/${uboot_name}"
	cp README "$uboottempdir/usr/lib/${uboot_name}"

	mkdir -p "$uboottempdir/boot"
	cp BOOT.bin "$uboottempdir/boot"
}

write_uboot_platform() {
	:
}

function pre_prepare_partitions() {
	# Filesystem must fill partition regardless of alignment
	mkopts[fat]='-F 32'
}
